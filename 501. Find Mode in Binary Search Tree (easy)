


/**
Given a binary search tree (BST) with duplicates, find all the mode(s) (the most frequently occurred element) in the given BST.

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than or equal to the node's key.
The right subtree of a node contains only nodes with keys greater than or equal to the node's key.
Both the left and right subtrees must also be binary search trees.
 
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
        Integer pre;
int max = Integer.MIN_VALUE;
int cnt = 0;

public int[] findMode(TreeNode root) {
    List<Integer> ans = new ArrayList<>();
    inorder(root, ans);

    int[] res = new int[ans.size()];
    for (int i = 0; i < ans.size(); i++) res[i] = ans.get(i);
    return res;
}

public void inorder(TreeNode root, List<Integer> ans) {
    if (root == null) return;
    inorder(root.left, ans);

    if (pre == null || root.val != pre) cnt = 1;
    else if (pre == null || root.val == pre) cnt++;
    pre = root.val;
    if (cnt > max) {
        ans.clear();
        ans.add(pre);
        max = cnt;
    }
    else if (cnt == max){
        ans.add(pre);
    }
    inorder(root.right, ans);
}
}
